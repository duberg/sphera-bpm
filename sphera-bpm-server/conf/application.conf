
# Sphera settings
sphera {
  enabled += "sphera.bpm.BpmModule$"

  services.defaultTimeout = 30s

  secret = "odw9BImB5pkF`XasEdfuuA=gueReN0;b2eaY1VVziUNTyfdesmmkAk0InRzKRJ3S"

  http {
    active = true
    host = "0.0.0.0"
    port = 9000
  }
  cluster = false

  // таймаут для акторов (в мс)
  actorTimeout = 20s

  // количество параллельных акторов данных (по умолчанию 4)
  parallelProc = 8

  core {
    AuthenticationService {
      rememberMeSessionTimeout = 14d
      sessionTimeout = 1h
    }
  }

  security {
    # Ссылка на форму входа в систему.
    # Если результат проверки аутентификации пользователя отрицательный, то перенаправляем на эту ссылку
    # Uri содержит URI первоначального запроса, после входа в систему
    login = "/auth/login?uri=:uri"

    # Tаймаут для запроса AuthenticationService (в миллисекундах),
    # Если ответ не получен после таймаута считаем, что пользователь не аутентифицирован
    # Таймаут по умолчанию 3 секунды
    authenticationServiceTimeout = 30s

    # Таймаут сессии пользователя в минутах
    sessionTimeout = 600
  }

  cassandra {
    hosts = [ "127.0.0.1" ]
    keyspace = "sphera_s"
    user = "sphera"
    password = "abc"
  }


  core.initDb {
    createSchema = false

    languages = [
      {id = "RU", name = "Russian"},
      {id = "EN", name = "English"}
    ]

    applications = [
      {
        id = "BPM"
        code = "bpm"
        name = "Бизнес процессы"
      },
      {
        id = "ADMIN"
        code = "admin"
        name = "Администрирование"
      }
    ]

    tenants = [
      {
        id = "sphera"
        name = "sphera"
        applications = ["BPM", "sphera", "ADMIN", "UIC"]
        languages = ["RU", "EN"]
      },
      {
        id = "sphera"
        name = "sphera"
        applications = ["sphera", "BPM"]
        languages = ["RU", "EN"]
      }
    ]

    users = [
      {
        id = "00000000-0000-00000-0000-0000000000000"
        firstname = "sphera"
        lastname = "sphera"
        email = "sphera@gmail.com"
        phone = "+7"
        tenants = [
          { tenant = "sphera" },
          { tenant = "sphera", roles = ["admin", "chairman", "expert" ]}
        ]

      }
    ]

  }
}

akka {

  actor.debug.receive = off
  loglevel = DEBUG

//  loglevel = INFO
//  stdout-loglevel = INFO
  #event-handlers = ["akka.event.Logging$DefaultLogger"]
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
//  actor {
//    provider = "akka.cluster.ClusterActorRefProvider"
//  }
//  remote {
//    enabled-transports = ["akka.remote.netty.tcp"]
//    log-remote-lifecycle-events = off
//    netty.tcp {
//      hostname = "127.0.0.1"
//      port = 2551
//      hostname = ${?HOST}
//      port = ${?PORT}
//    }
//  }
//  cluster {
//    seed-nodes = [
//     // "akka.tcp://sphera@192.168.1.243:2551"
//      "akka.tcp://sphera@127.0.0.1:2551"
//    ]
//    roles = [ "seed" ]
//    role {
//      seed.min-nr-of-members = 1
//    }
//  }
}

akka.persistence.journal.plugin = "cassandra-journal"
akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

cassandra-journal {
  contact-points = [ "127.0.0.1" ]
  keyspace = "sphera_s"
  authentication{
    username = "sphera"
    password = "abc"
  }
}

cassandra-snapshot-store {
  contact-points = [ "127.0.0.1" ]
  keyspace = "sphera_s"
  authentication{
    username = "sphera"
    password = "abc"
  }
}

akka.actor.warn-about-java-serializer-usage = off

sphera {
  security {
    debug = true
    debugSession {
      session = "00000000-0000-00000-0000-0000000000000"
      user = "00000000-0000-00000-0000-0000000000000"
      tenant = sphera
      application = BPM
      language = RU
    }
  }
}





